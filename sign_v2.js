const jsdom = require("jsdom");
const { JSDOM } = jsdom;
const dom = new JSDOM(`<!DOCTYPE html><p>Hello world</p>`);
window = global;
var document = dom.window.document;
var params = {
    location:{
        hash: "#/ffa/morder/aftersale/list",
        host: "fxg.jinritemai.com",
        referer: "https://fxg.jinritemai.com/index.html",
        hostname: "fxg.jinritemai.com",
        href: "https://fxg.jinritemai.com/index.html#/ffa/morder/aftersale/list",
        origin: "https://fxg.jinritemai.com",
        pathname: "/index.html",
        port: "",
        protocol: "https:",
        search: "",
    },
    navigator:{
        appCodeName: "Mozilla",
        appName: "Netscape",
        appVersion: "5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36",
        cookieEnabled: true,
        deviceMemory: 8,
        doNotTrack: null,
        hardwareConcurrency: 8,
        language: "zh-CN",
        languages: ["zh-CN", "zh"],
        maxTouchPoints: 0,
        onLine: true,
        platform: "Win32",
        product: "Gecko",
        productSub: "20030107",
        userAgent: "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36",
        vendor: "Google Inc.",
        vendorSub: "",
    },
    "screen":{
        availHeight: 1040,
        availLeft: 0,
        availTop: 0,
        availWidth: 1920,
        colorDepth: 24,
        height: 1080,
        pixelDepth: 24,
        width: 1920,
    }
};
Object.assign(window,params);
function setCookie(name, value, seconds) {
    seconds = seconds || 0;
    var expires = "";
    if (seconds != 0 ) {
    var date = new Date();
    date.setTime(date.getTime()+(seconds*1000));
    expires = "; expires="+date.toGMTString();
    }
//    document.cookie = name+"="+escape(value);
    document.cookie = name+"="+escape(value)+expires+"; path=/";
}
cookies = "";

for(let cookie of cookies.split(";")){
    tmp = cookie.split("=");
    setCookie(tmp[0],tmp[1],6000);
}

window.document = document;
var glb;
(glb = "undefined" == typeof window ? global : window)._$jsvmprt = function(e, a, f) {
    function b() {
        if ("undefined" == typeof Reflect || !Reflect.construct)
            return !1;
        if (Reflect.construct.sham)
            return !1;
        if ("function" == typeof Proxy)
            return !0;
        try {
            return Date.prototype.toString.call(Reflect.construct(Date, [], (function() {}
            ))),
            !0
        } catch (e) {
            return !1
        }
    }
    function c(e, a, f) {
        return (c = b() ? Reflect.construct : function(e, a, f) {
            var b = [null];
            b.push.apply(b, a);
            var c = new (Function.bind.apply(e, b));
            return f && d(c, f.prototype),
            c
        }
        ).apply(null, arguments)
    }
    function d(e, a) {
        return (d = Object.setPrototypeOf || function(e, a) {
            return e.__proto__ = a,
            e
        }
        )(e, a)
    }
    function r(e) {
        return function(e) {
            if (Array.isArray(e)) {
                for (var a = 0, f = new Array(e.length); a < e.length; a++)
                    f[a] = e[a];
                return f
            }
        }(e) || function(e) {
            if (Symbol.iterator in Object(e) || "[object Arguments]" === Object.prototype.toString.call(e))
                return Array.from(e)
        }(e) || function() {
            throw new TypeError("Invalid attempt to spread non-iterable instance")
        }()
    }
    for (var n = [], l = 0, i = [], t = 0, o = function(e, a) {
        var f = e[a++]
          , b = e[a]
          , c = parseInt("" + f + b, 16);
        if (c >> 7 == 0)
            return [1, c];
        if (c >> 6 == 2) {
            var d = parseInt("" + e[++a] + e[++a], 16);
            return c &= 63,
            [2, d = (c <<= 8) + d]
        }
        if (c >> 6 == 3) {
            var r = parseInt("" + e[++a] + e[++a], 16)
              , n = parseInt("" + e[++a] + e[++a], 16);
            return c &= 63,
            [3, n = (c <<= 16) + (r <<= 8) + n]
        }
    }, s = function(e, a) {
        var f = parseInt("" + e[a] + e[a + 1], 16);
        return f = f > 127 ? -256 + f : f
    }, u = function(e, a) {
        var f = parseInt("" + e[a] + e[a + 1] + e[a + 2] + e[a + 3], 16);
        return f = f > 32767 ? -65536 + f : f
    }, p = function(e, a) {
        var f = parseInt("" + e[a] + e[a + 1] + e[a + 2] + e[a + 3] + e[a + 4] + e[a + 5] + e[a + 6] + e[a + 7], 16);
        return f = f > 2147483647 ? 0 + f : f
    }, v = function(e, a) {
        return parseInt("" + e[a] + e[a + 1], 16)
    }, y = function(e, a) {
        return parseInt("" + e[a] + e[a + 1] + e[a + 2] + e[a + 3], 16)
    }, h = h || this || window, g = Object.keys || function(e) {
        var a = {}
          , f = 0;
        for (var b in e)
            a[f++] = b;
        return a.length = f,
        a
    }
    , m = (e.length,
    0), w = "", C = m; C < m + 16; C++) {
        var q = "" + e[C++] + e[C];
        q = parseInt(q, 16),
        w += String.fromCharCode(q)
    }
    if ("HNOJ@?RC" != w)
        throw new Error("error magic number " + w);
    m += 16;
    parseInt("" + e[m] + e[m + 1], 16);
    m += 8,
    l = 0;
    for (var I = 0; I < 4; I++) {
        var z = m + 2 * I
          , S = "" + e[z++] + e[z]
          , x = parseInt(S, 16);
        l += (3 & x) << 2 * I
    }
    m += 16,
    m += 8;
    var j = parseInt("" + e[m] + e[m + 1] + e[m + 2] + e[m + 3] + e[m + 4] + e[m + 5] + e[m + 6] + e[m + 7], 16)
      , $ = j
      , O = m += 8
      , R = y(e, m += j);
    R[1];
    m += 4,
    n = {
        p: [],
        q: []
    };
    for (var _ = 0; _ < R; _++) {
        for (var A = o(e, m), k = m += 2 * A[0], D = 0; D < A[1]; D++) {
            var E = "" + e[k++] + e[k++];
            E = parseInt(E, 16),
            n.p.push(E)
        }
        n.q.push([n.p.length - A[1], n.p.length]),
        m += 2 * A[1]
    }
    var P = {
        5: 1,
        6: 1,
        70: 1,
        22: 1,
        23: 1,
        37: 1,
        73: 1
    }
      , F = {
        72: 1
    }
      , H = {
        74: 1
    }
      , J = {
        11: 1,
        12: 1,
        24: 1,
        26: 1,
        27: 1,
        31: 1
    }
      , N = {
        10: 1
    }
      , T = {
        2: 1,
        29: 1,
        30: 1,
        20: 1
    }
      , B = []
      , G = [];
    function K(e, a, f) {
        for (var b = a; b < a + f; ) {
            var c = v(e, b);
            B[b] = c,
            b += 2;
            var d = void 0;
            F[c] ? (G[b] = s(e, b),
            b += 2) : P[c] ? (G[b] = u(e, b),
            b += 4) : H[c] ? (G[b] = p(e, b),
            b += 8) : J[c] ? (d = v(e, b),
            G[b] = d,
            b += 2) : N[c] ? (d = y(e, b),
            G[b] = d,
            b += 4) : T[c] && (d = y(e, b),
            G[b] = d,
            b += 4)
        }
    }
    return M(e, O, $ / 2, [], a, f);
    function L(e, a, f, b, d, o, m, w) {
        null == o && (o = this);
        var C, q, I, z = [], S = 0;
        m && (C = m);
        var x, j, $ = a, O = $ + 2 * f;
        if (!w)
            for (; $ < O; ) {
                var R = parseInt("" + e[$] + e[$ + 1], 16);
                $ += 2;
                var _ = 3 & (x = 13 * R % 241);
                if (x >>= 2,
                _ < 1) {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ < 1) {
                        if ((_ = x) > 14)
                            j = u(e, $),
                            (P = function a() {
                                var f = arguments;
                                return a.y > 0 ? M(e, a.c, a.l, f, a.z, this, null, 0) : (a.y++,
                                M(e, a.c, a.l, f, a.z, this, null, 0))
                            }
                            ).c = $ + 4,
                            P.l = j - 2,
                            P.x = L,
                            P.y = 0,
                            P.z = d,
                            z[S] = P,
                            $ += 2 * j - 2;
                        else if (_ > 12)
                            q = z[S--],
                            I = z[S--],
                            (_ = z[S--]).x === L ? _.y >= 1 ? z[++S] = M(e, _.c, _.l, q, _.z, I, null, 1) : (z[++S] = M(e, _.c, _.l, q, _.z, I, null, 0),
                            _.y++) : z[++S] = _.apply(I, q);
                        else if (_ > 5)
                            C = z[S--],
                            z[S] = z[S] != C;
                        else if (_ > 3)
                            C = z[S--],
                            z[S] = z[S] * C;
                        else if (_ > -1)
                            return [1, z[S--]]
                    } else if (_ < 2) {
                        (_ = x) < 4 ? (q = z[S--],
                        (_ = z[S]).x === L ? _.y >= 1 ? z[S] = M(e, _.c, _.l, [q], _.z, I, null, 1) : (z[S] = M(e, _.c, _.l, [q], _.z, I, null, 0),
                        _.y++) : z[S] = _(q)) : _ < 6 ? z[S -= 1] = z[S][z[S + 1]] : _ < 8 ? z[S] = --z[S] : _ < 10 && (C = z[S--],
                        z[S] = typeof C)
                    } else if (_ < 3) {
                        if ((_ = x) > 11)
                            throw z[S--];
                        if (_ > 7) {
                            for (C = z[S--],
                            j = y(e, $),
                            _ = "",
                            D = n.q[j][0]; D < n.q[j][1]; D++)
                                _ += String.fromCharCode(l ^ n.p[D]);
                            $ += 4,
                            z[S--][_] = C
                        } else
                            _ > 5 && (z[S] = g(z[S]))
                    } else {
                        (_ = x) > 10 ? z[++S] = void 0 : _ > 1 ? (C = z[S--],
                        z[S] = z[S] >= C) : _ > -1 && (z[++S] = null)
                    }
                } else if (_ < 2) {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ < 1)
                        if ((_ = x) < 5) {
                            j = u(e, $);
                            try {
                                if (i[t][2] = 1,
                                1 == (C = L(e, $ + 4, j - 3, [], d, o, null, 0))[0])
                                    return C
                            } catch (m) {
                                if (i[t] && i[t][1] && 1 == (C = L(e, i[t][1][0], i[t][1][1], [], d, o, m, 0))[0])
                                    return C
                            } finally {
                                if (i[t] && i[t][0] && 1 == (C = L(e, i[t][0][0], i[t][0][1], [], d, o, null, 0))[0])
                                    return C;
                                i[t] = 0,
                                t--
                            }
                            $ += 2 * j - 2
                        } else
                            _ < 7 ? (j = v(e, $),
                            $ += 2,
                            z[S -= j] = 0 === j ? new z[S] : c(z[S], r(z.slice(S + 1, S + j + 1)))) : _ < 9 && (C = z[S--],
                            z[S] = z[S] & C);
                    else if (_ < 2) {
                        if ((_ = x) < 8)
                            q = z[S--],
                            C = delete z[S--][q];
                        else if (_ < 10) {
                            for (j = y(e, $),
                            _ = "",
                            D = n.q[j][0]; D < n.q[j][1]; D++)
                                _ += String.fromCharCode(l ^ n.p[D]);
                            $ += 4,
                            z[S] = z[S][_]
                        } else
                            _ < 12 ? (C = z[S--],
                            z[S] = z[S] << C) : _ < 14 && (z[++S] = s(e, $),
                            $ += 2)
                    } else if (_ < 3) {
                        (_ = x) > 11 ? (C = z[S],
                        z[++S] = C) : _ > 9 ? (C = z[S -= 2][z[S + 1]] = z[S + 2],
                        S--) : _ > 2 ? (C = z[S--],
                        z[S] = z[S] <= C) : _ > 0 && (z[++S] = C)
                    } else {
                        if ((_ = x) > 12)
                            z[++S] = o;
                        else if (_ > 5)
                            C = z[S--],
                            z[S] = z[S] !== C;
                        else if (_ > 3)
                            C = z[S--],
                            z[S] = z[S] / C;
                        else if (_ > 1) {
                            if ((j = u(e, $)) < 0) {
                                w = 1,
                                K(e, a, 2 * f),
                                $ += 2 * j - 2;
                                break
                            }
                            $ += 2 * j - 2
                        } else
                            _ > -1 && (z[S] = !z[S])
                    }
                } else if (_ < 3) {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ > 2)
                        (_ = x) < 5 ? (j = u(e, $),
                        i[t][0] && !i[t][2] ? i[t][1] = [$ + 4, j - 3] : i[t++] = [0, [$ + 4, j - 3], 0],
                        $ += 2 * j - 2) : _ < 7 ? (j = v(e, $),
                        $ += 2,
                        z[++S] = d["$" + j]) : _ < 9 && (C = z[S--],
                        z[S] = z[S] | C);
                    else if (_ > 1) {
                        if ((_ = x) < 2) {
                            for (j = y(e, $),
                            C = "",
                            D = n.q[j][0]; D < n.q[j][1]; D++)
                                C += String.fromCharCode(l ^ n.p[D]);
                            z[++S] = C,
                            $ += 4
                        } else if (_ < 4)
                            if (z[S--])
                                $ += 4;
                            else {
                                if ((j = u(e, $)) < 0) {
                                    w = 1,
                                    K(e, a, 2 * f),
                                    $ += 2 * j - 2;
                                    break
                                }
                                $ += 2 * j - 2
                            }
                        else
                            _ < 6 ? (C = z[S--],
                            z[S] = z[S] % C) : _ < 8 ? (C = z[S--],
                            z[S] = z[S]instanceof C) : _ < 15 && (z[++S] = !1)
                    } else if (_ > 0) {
                        (_ = x) > 12 ? (C = z[S - 1],
                        q = z[S],
                        z[++S] = C,
                        z[++S] = q) : _ > 3 ? (C = z[S--],
                        z[S] = z[S] == C) : _ > 1 ? (C = z[S--],
                        z[S] = z[S] + C) : _ > -1 && (z[++S] = h)
                    } else {
                        (_ = x) > 13 ? (z[++S] = u(e, $),
                        $ += 4) : _ > 11 ? (C = z[S--],
                        z[S] = z[S] >> C) : _ > 9 ? (j = v(e, $),
                        $ += 2,
                        C = z[S--],
                        d[j] = C) : _ > 7 ? (j = y(e, $),
                        $ += 4,
                        q = S + 1,
                        z[S -= j - 1] = j ? z.slice(S, q) : []) : _ > 0 && (C = z[S--],
                        z[S] = z[S] > C)
                    }
                } else {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ > 2)
                        (_ = x) < 2 ? (C = z[S--],
                        z[S] = z[S] < C) : _ < 9 ? (j = v(e, $),
                        $ += 2,
                        z[S] = z[S][j]) : _ < 11 ? z[++S] = !0 : _ < 13 ? (C = z[S--],
                        z[S] = z[S] >>> C) : _ < 15 && (z[++S] = p(e, $),
                        $ += 8);
                    else if (_ > 1) {
                        (_ = x) > 10 ? (j = u(e, $),
                        i[++t] = [[$ + 4, j - 3], 0, 0],
                        $ += 2 * j - 2) : _ > 8 ? (C = z[S--],
                        z[S] = z[S] ^ C) : _ > 6 && (C = z[S--])
                    } else if (_ > 0) {
                        if ((_ = x) < 3) {
                            var A = 0
                              , k = z[S].length
                              , E = z[S];
                            z[++S] = function() {
                                var e = A < k;
                                if (e) {
                                    var a = E[A++];
                                    z[++S] = a
                                }
                                z[++S] = e
                            }
                        } else
                            _ < 5 ? (j = v(e, $),
                            $ += 2,
                            C = d[j],
                            z[++S] = C) : _ < 7 ? z[S] = ++z[S] : _ < 9 && (C = z[S--],
                            z[S] = z[S]in C)
                    } else {
                        if ((_ = x) > 13)
                            C = z[S],
                            z[S] = z[S - 1],
                            z[S - 1] = C;
                        else if (_ > 4)
                            C = z[S--],
                            z[S] = z[S] === C;
                        else if (_ > 2)
                            C = z[S--],
                            z[S] = z[S] - C;
                        else if (_ > 0) {
                            for (j = y(e, $),
                            _ = "",
                            D = n.q[j][0]; D < n.q[j][1]; D++)
                                _ += String.fromCharCode(l ^ n.p[D]);
                            _ = +_,
                            $ += 4,
                            z[++S] = _
                        }
                    }
                }
            }
        if (w)
            for (; $ < O; ) {
                R = B[$];
                $ += 2;
                _ = 3 & (x = 13 * R % 241);
                if (x >>= 2,
                _ > 2) {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ < 1)
                        if ((_ = x) < 2) {
                            for (j = G[$],
                            _ = "",
                            D = n.q[j][0]; D < n.q[j][1]; D++)
                                _ += String.fromCharCode(l ^ n.p[D]);
                            _ = +_,
                            $ += 4,
                            z[++S] = _
                        } else
                            _ < 4 ? (C = z[S--],
                            z[S] = z[S] - C) : _ < 6 ? (C = z[S--],
                            z[S] = z[S] === C) : _ < 15 && (C = z[S],
                            z[S] = z[S - 1],
                            z[S - 1] = C);
                    else if (_ < 2) {
                        if ((_ = x) < 3) {
                            A = 0,
                            k = z[S].length,
                            E = z[S];
                            z[++S] = function() {
                                var e = A < k;
                                if (e) {
                                    var a = E[A++];
                                    z[++S] = a
                                }
                                z[++S] = e
                            }
                        } else
                            _ < 5 ? (j = G[$],
                            $ += 2,
                            C = d[j],
                            z[++S] = C) : _ < 7 ? z[S] = ++z[S] : _ < 9 && (C = z[S--],
                            z[S] = z[S]in C)
                    } else if (_ < 3) {
                        (_ = x) > 10 ? (j = G[$],
                        i[++t] = [[$ + 4, j - 3], 0, 0],
                        $ += 2 * j - 2) : _ > 8 ? (C = z[S--],
                        z[S] = z[S] ^ C) : _ > 6 && (C = z[S--])
                    } else {
                        (_ = x) < 2 ? (C = z[S--],
                        z[S] = z[S] < C) : _ < 9 ? (j = G[$],
                        $ += 2,
                        z[S] = z[S][j]) : _ < 11 ? z[++S] = !0 : _ < 13 ? (C = z[S--],
                        z[S] = z[S] >>> C) : _ < 15 && (z[++S] = G[$],
                        $ += 8)
                    }
                } else if (_ > 1) {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ > 2)
                        (_ = x) > 7 ? (C = z[S--],
                        z[S] = z[S] | C) : _ > 5 ? (j = G[$],
                        $ += 2,
                        z[++S] = d["$" + j]) : _ > 3 && (j = G[$],
                        i[t][0] && !i[t][2] ? i[t][1] = [$ + 4, j - 3] : i[t++] = [0, [$ + 4, j - 3], 0],
                        $ += 2 * j - 2);
                    else if (_ > 1) {
                        if ((_ = x) > 13)
                            z[++S] = !1;
                        else if (_ > 6)
                            C = z[S--],
                            z[S] = z[S]instanceof C;
                        else if (_ > 4)
                            C = z[S--],
                            z[S] = z[S] % C;
                        else if (_ > 2)
                            z[S--] ? $ += 4 : $ += 2 * (j = G[$]) - 2;
                        else if (_ > 0) {
                            for (j = G[$],
                            C = "",
                            D = n.q[j][0]; D < n.q[j][1]; D++)
                                C += String.fromCharCode(l ^ n.p[D]);
                            z[++S] = C,
                            $ += 4
                        }
                    } else if (_ > 0) {
                        (_ = x) > 12 ? (C = z[S - 1],
                        q = z[S],
                        z[++S] = C,
                        z[++S] = q) : _ > 3 ? (C = z[S--],
                        z[S] = z[S] == C) : _ > 1 ? (C = z[S--],
                        z[S] = z[S] + C) : _ > -1 && (z[++S] = h)
                    } else {
                        (_ = x) > 13 ? (z[++S] = G[$],
                        $ += 4) : _ > 11 ? (C = z[S--],
                        z[S] = z[S] >> C) : _ > 9 ? (j = G[$],
                        $ += 2,
                        C = z[S--],
                        d[j] = C) : _ > 7 ? (j = G[$],
                        $ += 4,
                        q = S + 1,
                        z[S -= j - 1] = j ? z.slice(S, q) : []) : _ > 0 && (C = z[S--],
                        z[S] = z[S] > C)
                    }
                } else if (_ > 0) {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ > 2)
                        (_ = x) < 1 ? z[S] = !z[S] : _ < 3 ? $ += 2 * (j = G[$]) - 2 : _ < 5 ? (C = z[S--],
                        z[S] = z[S] / C) : _ < 7 ? (C = z[S--],
                        z[S] = z[S] !== C) : _ < 14 && (z[++S] = o);
                    else if (_ > 1) {
                        (_ = x) < 2 ? z[++S] = C : _ < 4 ? (C = z[S--],
                        z[S] = z[S] <= C) : _ < 11 ? (C = z[S -= 2][z[S + 1]] = z[S + 2],
                        S--) : _ < 13 && (C = z[S],
                        z[++S] = C)
                    } else if (_ > 0) {
                        if ((_ = x) > 12)
                            z[++S] = G[$],
                            $ += 2;
                        else if (_ > 10)
                            C = z[S--],
                            z[S] = z[S] << C;
                        else if (_ > 8) {
                            for (j = G[$],
                            _ = "",
                            D = n.q[j][0]; D < n.q[j][1]; D++)
                                _ += String.fromCharCode(l ^ n.p[D]);
                            $ += 4,
                            z[S] = z[S][_]
                        } else
                            _ > 6 && (q = z[S--],
                            C = delete z[S--][q])
                    } else {
                        if ((_ = x) > 9)
                            ;
                        else if (_ > 7)
                            C = z[S--],
                            z[S] = z[S] & C;
                        else if (_ > 5)
                            j = G[$],
                            $ += 2,
                            z[S -= j] = 0 === j ? new z[S] : c(z[S], r(z.slice(S + 1, S + j + 1)));
                        else if (_ > 3) {
                            j = G[$];
                            try {
                                if (i[t][2] = 1,
                                1 == (C = L(e, $ + 4, j - 3, [], d, o, null, 0))[0])
                                    return C
                            } catch (m) {
                                if (i[t] && i[t][1] && 1 == (C = L(e, i[t][1][0], i[t][1][1], [], d, o, m, 0))[0])
                                    return C
                            } finally {
                                if (i[t] && i[t][0] && 1 == (C = L(e, i[t][0][0], i[t][0][1], [], d, o, null, 0))[0])
                                    return C;
                                i[t] = 0,
                                t--
                            }
                            $ += 2 * j - 2
                        }
                    }
                } else {
                    _ = 3 & x;
                    if (x >>= 2,
                    _ < 1) {
                        if ((_ = x) < 1)
                            return [1, z[S--]];
                        if (_ < 5)
                            C = z[S--],
                            z[S] = z[S] * C;
                        else if (_ < 7)
                            C = z[S--],
                            z[S] = z[S] != C;
                        else if (_ < 14)
                            q = z[S--],
                            I = z[S--],
                            (_ = z[S--]).x === L ? _.y >= 1 ? z[++S] = M(e, _.c, _.l, q, _.z, I, null, 1) : (z[++S] = M(e, _.c, _.l, q, _.z, I, null, 0),
                            _.y++) : z[++S] = _.apply(I, q);
                        else if (_ < 16) {
                            var P;
                            j = G[$],
                            (P = function a() {
                                var f = arguments;
                                return a.y > 0 ? M(e, a.c, a.l, f, a.z, this, null, 0) : (a.y++,
                                M(e, a.c, a.l, f, a.z, this, null, 0))
                            }
                            ).c = $ + 4,
                            P.l = j - 2,
                            P.x = L,
                            P.y = 0,
                            P.z = d,
                            z[S] = P,
                            $ += 2 * j - 2
                        }
                    } else if (_ < 2) {
                        (_ = x) > 8 ? (C = z[S--],
                        z[S] = typeof C) : _ > 6 ? z[S] = --z[S] : _ > 4 ? z[S -= 1] = z[S][z[S + 1]] : _ > 2 && (q = z[S--],
                        (_ = z[S]).x === L ? _.y >= 1 ? z[S] = M(e, _.c, _.l, [q], _.z, I, null, 1) : (z[S] = M(e, _.c, _.l, [q], _.z, I, null, 0),
                        _.y++) : z[S] = _(q))
                    } else if (_ < 3) {
                        if ((_ = x) < 7)
                            z[S] = g(z[S]);
                        else if (_ < 9) {
                            for (C = z[S--],
                            j = G[$],
                            _ = "",
                            D = n.q[j][0]; D < n.q[j][1]; D++)
                                _ += String.fromCharCode(l ^ n.p[D]);
                            $ += 4,
                            z[S--][_] = C
                        } else if (_ < 13)
                            throw z[S--]
                    } else {
                        (_ = x) < 1 ? z[++S] = null : _ < 3 ? (C = z[S--],
                        z[S] = z[S] >= C) : _ < 12 && (z[++S] = void 0)
                    }
                }
            }
        return [0, null]
    }
    function M(e, a, f, b, c, d, r, n) {
        var l, i;
        null == d && (d = this),
        c && !c.d && (c.d = 0,
        c.$0 = c,
        c[1] = {});
        var t = {}
          , o = t.d = c ? c.d + 1 : 0;
        for (t["$" + o] = t,
        i = 0; i < o; i++)
            t[l = "$" + i] = c[l];
        for (i = 0,
        o = t.length = b.length; i < o; i++)
            t[i] = b[i];
        return n && !B[a] && K(e, a, 2 * f),
        B[a] ? L(e, a, f, 0, t, d, null, 1)[1] : L(e, a, f, 0, t, d, null, 0)[1]
    }
}
,
(glb = "undefined" == typeof window ? global : window)._$jsvmprt("", []);
//console.log(window)
//sign = window.byted_acrawler.sign({url: 'https://compass.jinritemai.com/business_api/shop/core_data/core_index?date_type=2&begin_date=1624266603&index_selected=&_lid=530038702223'})
//console.log(sign)
var cookie_cache = {};
cookie_cache.cookie = document.cookie;
Object.defineProperty(document, 'cookie', {
        get: function () {
            console.log("get cookie", cookie_cache)
            return cookie_cache.cookie;
        },
        set: function (val) {
            console.log('Setting cookie', val);
            // 填写cookie名
            if (val.indexOf('cookie名') != -1) {
                debugger;
            }
            var cookie = val.split(";")[0];
            var ncookie = cookie.split("=");
            var flag = false;
            var cache = cookie_cache.split("; ");
            cache = cache.map(function (a) {
                if (a.split("=")[0] === ncookie[0]) {
                    flag = true;
                    return cookie;
                }
                return a;
            })
            cookie_cache = cache.join("; ");
            if (!flag) {
                cookie_cache += cookie + "; ";
            }
            return cookie_cache;
        }
    });

module.exports = {"toutiao_sign":function(url, cookie){
    cookie_cache.cookie = cookie;
    console.log(cookie_cache.cookie)
    return window.byted_acrawler.sign({url: url})
}}